/*Android Gradle Plugin out of the box only supports code coverage for instrumentation tests.
This add support for unit tests as well.*/

def fileFilter = [
        'android/**/*.*',
        'com/android/**/*.class',
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*',
        '**/*Binding*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BR.*',
        '**/R.*',
        '**/R$*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*$Lambda$*.*',

        //Dagger 2
        '**/*Dagger*Component*.*',
        '**/Dagger*Subcomponent*.class',
        '**/*Subcomponent$Builder.class',
        '**/*Module.*',
        '**/*Module$*.*',
        '**/*Module_*Factory.class',
        '**/*MembersInjector*.*',
        '**/*_Factory*.*',
        '**/*Provide*Factory*.*',

        //Room
        '**/AppDatabase.class',

        //Intentional Exclusion
        '**/base/*',
        '**/data/*',
        '**/di/*.*',
        '**/*Activity.*',
        '**/*Fragment.*',
        '**/*Adapter.*',
        '**/*ViewPager*.*',
        '**/*ViewHolder*.*',
        '**/*Module*.*',
        '**/util/*.*'
]

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    def javaClasses = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    classDirectories = files([javaClasses, kotlinClasses])
    sourceDirectories = files([
            "$project.projectDir/src/main/java",
            "$project.projectDir/src/debug/java",
            "$project.projectDir/src/main/kotlin",
            "$project.projectDir/src/debug/kotlin"
    ])

    executionData = files('build/jacoco/testStagingDebugUnitTest.exec')

    reports {
        xml.enabled = false
        html.enabled = true
    }

}
