apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "com.github.ben-manes.versions"

apply from: "$project.rootDir/tools/script-lint.gradle"
apply from: "$project.rootDir/tools/script-checkstyle.gradle"
apply from: "$project.rootDir/tools/script-findbugs.gradle"
apply from: "$project.rootDir/tools/script-pmd.gradle"
apply from: "$project.rootDir/tools/script-jacoco.gradle"

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.ps.androidx"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
        buildConfigField "String", "API_KEY", "\"${getProperty("api.properties", "api_key")}\""
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
        debug {
            testCoverageEnabled true
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
        test {
            resources.srcDirs += ['src/test/resources']
        }
        androidTest {
            resources.srcDirs += ['src/androidTest/resources']
        }
    }
    packagingOptions {
        exclude 'META-INF/dependencies*'
        exclude 'META-INF/DEPENDENCIES*'
        exclude 'META-INF/notice*'
        exclude 'META-INF/NOTICE*'
        exclude 'META-INF/LICENSE*'
        exclude 'META-INF/license*'
    }
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }
    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }
    dependencyUpdates.resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

apply from: 'dependencies.gradle'


